package matrix

import (
	"errors"
	"strings"
)

// IdentifierType represents methods in which the user can identify themselves.
type IdentifierType string

// Official list of Identifier types.
// It can be found at https://matrix.org/docs/spec/client_server/r0.6.1#identifier-types.
const (
	IdentifierUser       IdentifierType = "m.id.user"
	IdentifierThirdparty                = "m.id.thirdparty"
	IdentifierPhone                     = "m.id.phone"
)

// Identifier represents a struct with all possible fields of identifying a user.
type Identifier struct {
	Type IdentifierType `json:"type"`

	// User is valid when the type is IdentifierUser.
	User string `json:"user"`

	// Medium and Address are valid when the type is IdentifierThirdparty.
	Medium  string `json:"medium"`
	Address string `json:"address"`

	// Country and Phone are valid when the type is IdentifierPhone.
	Country string `json:"country"`
	Phone   string `json:"phone"`
}

// ErrInvalidUserID is an error generated by ParseUserID when the user ID is invalid.
var ErrInvalidUserID = errors.New("invalid user ID passed")

// ParseUserID attempts to split the provided user ID into the local part and the host name.
// It does not make any attempt at validating if the local part and the host name is valid.
//
// It returns ErrInvalidUserID when the ID cannot be made sense of.
func ParseUserID(userID string) (localPart, serverName string, err error) {
	if len(userID) < 2 || !strings.HasPrefix(userID, "@") {
		return "", "", ErrInvalidUserID
	}
	split := strings.SplitN(userID[1:], ":", 2)
	if len(split) == 1 {
		return "", "", ErrInvalidUserID
	}

	return split[0], split[1], nil
}
